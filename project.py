# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LGezFiDWJ-DO3hZigNYZFsQ5ilBYsyRi
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import ipywidgets as widgets
from IPython.display import display


np.random.seed(42)
n_samples = 200
df = pd.DataFrame({
    'TV': np.random.uniform(0, 300, n_samples),
    'Radio': np.random.uniform(0, 100, n_samples),
    'Newspaper': np.random.uniform(0, 100, n_samples),
    'Social Media': np.random.uniform(0, 150, n_samples),
    'SEO': np.random.uniform(0, 120, n_samples),
})
df['Sales'] = 3 + 0.05 * df['TV'] + 0.02 * df['Radio'] + 0.01 * df['Newspaper'] + 0.03 * df['Social Media'] + 0.025 * df['SEO'] + np.random.normal(0, 1, n_samples)

df['Sales'] = df['Sales'].round(2)


X = df[['TV', 'Radio', 'Newspaper', 'Social Media', 'SEO']]
y = (df['Sales'] > df['Sales'].median()).astype(int)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)


model = LogisticRegression()
model.fit(X_train_scaled, y_train)


y_pred = model.predict(X_test_scaled)


accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy:.2f}')
print('Confusion Matrix:\n', conf_matrix)
print('Classification Report:\n', class_report)


plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()


plt.figure(figsize=(6, 4))
plt.scatter(df['TV'], df['Sales'], alpha=0.5)
plt.xlabel('TV Ad Spend')
plt.ylabel('Sales')
plt.title('TV Ad Spend vs. Sales')
plt.show()


def predict_sales(tv, radio, newspaper, social_media, seo):
    user_data = np.array([[tv, radio, newspaper, social_media, seo]])
    user_data_scaled = scaler.transform(user_data)
    prediction = model.predict(user_data_scaled)[0]
    return "High Sales" if prediction == 1 else "Low Sales"


tv_input = widgets.FloatText(description="TV Budget:")
radio_input = widgets.FloatText(description="Radio Budget:")
newspaper_input = widgets.FloatText(description="Newspaper Budget:")
social_media_input = widgets.FloatText(description="Social Media Budget:")
seo_input = widgets.FloatText(description="SEO Budget:")
predict_button = widgets.Button(description="Predict Sales")
output = widgets.Output()

def on_predict_clicked(b):
    with output:
        output.clear_output()
        prediction_result = predict_sales(tv_input.value, radio_input.value, newspaper_input.value, social_media_input.value, seo_input.value)
        print(f"Predicted Sales Category: {prediction_result}")

predict_button.on_click(on_predict_clicked)

display(tv_input, radio_input, newspaper_input, social_media_input, seo_input, predict_button, output)